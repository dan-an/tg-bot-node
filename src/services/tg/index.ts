/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä Telegram-–±–æ—Ç–∞.
 *
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
 * - –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π,
 * - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –¥–∏–∞–ª–æ–≥–∞–º–∏,
 * - –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–æ–¥–µ—Ä–∞—Ü–∏—è),
 * - –æ–±—Ä–∞–±–æ—Ç–∫—É callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫.
 */

import { config } from 'dotenv';
import { TelegramBot } from '@/types/telegram';
import { SaveFilmDialog } from '@/services/tg/dialogs/saveFilmDialog';
import { ShoppingDialog } from '@/services/tg/dialogs/shoppingDialog';
import { WhatToBuyDialog } from '@/services/tg/dialogs/whatToBuyDialog';
import { AddEventDialog } from '@/services/tg/dialogs/addEventDialog';
import { editMessage, resolveMessageMeta, sendMessage } from '@/services/tg/tools';
import { checkAccess } from '@/services/tg/sqlTools';
import { approveUser, rejectUser } from '@/services/db/moderation';

config();

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å, –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞.
 */
type DialogInstance = {
    handleNewMessage: (message: TelegramBot.Message) => Promise<void>;
    handleCallbackQuery?: (payload: TelegramBot.CallbackQuery) => Promise<void>;
    on: (event: string, callback: () => void) => void;
};

/**
 * –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏, –ø–æ–¥–∫–ª—é—á–∞–µ–º—ã–µ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º.
 */
const dialogs: Record<string, new () => DialogInstance> = {
    SaveFilmDialog,
    ShoppingDialog,
    WhatToBuyDialog,
    AddEventDialog,
};

export class TelegramController {
    /** –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã / —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ */
    messageMeta: TelegramBot.MessageEntity | null = null;

    /** –ü—Ä–∏–∑–Ω–∞–∫ —Ç–æ–≥–æ, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ @—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ */
    hasNeededMeta = false;

    /** –ü—Ä–∏–∑–Ω–∞–∫ —Ç–æ–≥–æ, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ */
    isReplyToBot = false;

    /** –ê–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å */
    activeDialog: DialogInstance | null = null;

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram.
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç:
     * - –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (`checkAccess`);
     * - –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥—ã –≤ –Ω—É–∂–Ω—ã–π –¥–∏–∞–ª–æ–≥;
     * - –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã `/cancel`.
     *
     * @param message –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public async handleNewMessage(message: TelegramBot.Message) {
        if (!(await checkAccess(message))) return;

        const botName = process.env.TELEGRAM_BOT_NAME!.toLowerCase();
        const messageText = message?.text?.toLowerCase()?.trim();
        const chatId = message?.chat?.id;
        if (!messageText || !chatId) return;

        const { meta, isAddressedToBot } = resolveMessageMeta(message, botName);

        this.messageMeta = meta;
        this.hasNeededMeta = isAddressedToBot;

        this.isReplyToBot = message.reply_to_message?.from?.username?.toLowerCase()?.trim() === botName;

        const fullCommand =
            meta?.type === 'bot_command' ? messageText.slice(meta.offset, meta.offset + meta.length) : '';
        const commandName = fullCommand.split('@')[0];

        if (commandName === '/cancel') {
            if (this.activeDialog) {
                await sendMessage({
                    chat_id: chatId,
                    text: '–¢—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥?',
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: '–î–∞',
                                    callback_data: JSON.stringify({ command: 'confirmCancel', confirm: true }),
                                },
                                {
                                    text: '–ù–µ—Ç',
                                    callback_data: JSON.stringify({ command: 'confirmCancel', confirm: false }),
                                },
                            ],
                        ],
                    },
                });
            } else {
                await sendMessage({ chat_id: chatId, text: '–£ —Ç–µ–±—è —Å–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.' });
            }
            return;
        }

        if (this.hasNeededMeta) {
            if (this.activeDialog) {
                this.activeDialog = null;
            }

            const botCommandName = commandName.replace('/', '').trim();
            this.setActiveDialog(botCommandName);

            if (this.activeDialog) {
                await this.activeDialog.handleNewMessage(message);
            }
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–π callback-–∑–∞–ø—Ä–æ—Å –∏–∑ inline-–∫–Ω–æ–ø–æ–∫.
     * –í–∫–ª—é—á–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É:
     * - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ã –¥–∏–∞–ª–æ–≥–∞;
     * - –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞: –æ–¥–æ–±—Ä–µ–Ω–∏–µ / –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ.
     *
     * @param payload –û–±—ä–µ–∫—Ç callback_query –æ—Ç Telegram
     */
    public async handleCallbackQuery(payload: TelegramBot.CallbackQuery) {
        const chatId = payload.message!.chat.id;
        const messageId = payload.message!.message_id;
        if (!payload.data) return;

        let parsed: { command?: string; user_id?: string; [key: string]: any };
        try {
            parsed = JSON.parse(payload.data);
        } catch {
            return;
        }

        switch (parsed.command) {
            case 'approve': {
                const userId = Number(parsed.user_id);
                approveUser(userId);
                await sendMessage({ chat_id: userId, text: '‚úÖ –í—ã –±—ã–ª–∏ –æ–¥–æ–±—Ä–µ–Ω—ã. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!' });
                await sendMessage({ chat_id: chatId, text: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ–¥–æ–±—Ä–µ–Ω.` });
                break;
            }

            case 'reject': {
                const userId = Number(parsed.user_id);
                rejectUser(userId);
                await sendMessage({ chat_id: userId, text: 'üö´ –í –¥–æ—Å—Ç—É–ø–µ –æ—Ç–∫–∞–∑–∞–Ω–æ.' });
                await sendMessage({ chat_id: chatId, text: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ—Ç–∫–ª–æ–Ω—ë–Ω.` });
                break;
            }

            case 'confirmCancel': {
                if (parsed.confirm) {
                    this.activeDialog = null;
                    await editMessage(messageId, {
                        chat_id: chatId,
                        text: '–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω—ë–Ω. –ú–æ–∂–µ–º –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.',
                    });
                } else {
                    await editMessage(messageId, {
                        chat_id: chatId,
                        text: '–û–∫–µ–π, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥.',
                    });
                }
                break;
            }

            default: {
                if (this.activeDialog) {
                    await this.activeDialog.handleCallbackQuery?.(payload);
                }
            }
        }
    }

    /**
     * –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
     *
     * @param message –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Telegram API
     */
    public async sendMessage(message: TelegramBot.SendMessageParams) {
        await sendMessage(message);
    }

    /**
     * –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ –∏–º–µ–Ω–∏ –∫–æ–º–∞–Ω–¥—ã.
     * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç `on("dialog is over")` –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞.
     *
     * @param dialogName –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (–±–µ–∑ "/")
     */
    private setActiveDialog(dialogName: string) {
        const key = Object.keys(dialogs).filter((key) => key.toLowerCase().includes(dialogName))[0];

        if (!key) return;

        this.activeDialog = new dialogs[key]();
        this.activeDialog.on('dialog is over', () => {
            this.activeDialog = null;
        });
    }
}
