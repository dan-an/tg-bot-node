/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Telegram Bot API.
 * –°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π, –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ—Ä–∞–∑,
 * –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–º–µ—Ö–∞–Ω–∏–∑–º –º–æ–¥–µ—Ä–∞—Ü–∏–∏).
 */

import { TelegramBot } from '@/types/telegram';
import axios from 'axios';
import { getUserStatus, addPendingUser } from '@/services/db/moderation';

const telegramUrl = `https://api.telegram.org/bot${process.env.TELEGRAM_API_TOKEN}`;

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram Bot API.
 *
 * @param message - –û–±—ä–µ–∫—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (chat_id, text –∏ —Ç.–¥.)
 */
export const sendMessage = async (message: TelegramBot.SendMessageParams): Promise<void> => {
    await axios.post(`${telegramUrl}/sendMessage`, message);
};

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞.
 *
 * @param phraseList - –ú–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫, –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é
 * @returns –û–¥–Ω–∞ –∏–∑ —Å—Ç—Ä–æ–∫ –º–∞—Å—Å–∏–≤–∞
 */
export const getRandomPhrase = (phraseList: string[]): string => {
    return phraseList[Math.floor(Math.random() * phraseList.length)];
};

/**
 * –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ä–∞–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Bot API.
 *
 * @param messageId - ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
 * @param params - –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (chat_id, text, reply_markup –∏ —Ç.–¥.)
 */
export const editMessage = async (messageId: number, params: TelegramBot.SendMessageParams): Promise<void> => {
    try {
        await axios.post(`${telegramUrl}/editMessageText`, {
            chat_id: params.chat_id,
            message_id: messageId,
            text: params.text,
            parse_mode: params.parse_mode,
            reply_markup: params.reply_markup,
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–µ—à–∞–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –æ–Ω –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.
 *
 * - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω (`approved`) ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true.
 * - –ï—Å–ª–∏ `pending` –∏–ª–∏ `rejected` ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
 * - –ï—Å–ª–∏ –Ω–æ–≤—ã–π ‚Äî –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –±–∞–∑—É, —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
 *
 * @param message - –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram —Å –ø–æ–ª–µ–º `from`
 * @returns true ‚Äî –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω, –∏–Ω–∞—á–µ false
 */
export const checkAccess = async (message: TelegramBot.Message): Promise<boolean> => {
    if (!message.from) return false;

    const from = message.from;
    const status = getUserStatus(from.id);

    const messageToSend: Partial<TelegramBot.SendMessageParams> = {
        chat_id: from.id,
    };

    switch (status) {
        case 'approved':
            return true;

        case 'rejected':
            messageToSend.text = 'üö´ –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –∑–∞–ø—Ä–µ—â—ë–Ω.';
            break;

        case 'pending':
            messageToSend.text = '‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è.';
            break;

        default:
            addPendingUser(from);
            messageToSend.text = '‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.';

            await sendMessage({
                chat_id: Number(process.env.ADMIN_ID),
                text: `üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n–ò–º—è: ${from.first_name}\nID: ${from.id}\nUsername: ${from.username ?? '‚Äî'}\n\n–†–∞–∑—Ä–µ—à–∏—Ç—å –¥–æ—Å—Ç—É–ø?`,
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: '‚úÖ –î–∞',
                                callback_data: JSON.stringify({ command: 'approve', user_id: from.id }),
                            },
                            {
                                text: '‚ùå –ù–µ—Ç',
                                callback_data: JSON.stringify({ command: 'reject', user_id: from.id }),
                            },
                        ],
                    ],
                },
            });
    }

    if (messageToSend.chat_id && messageToSend.text) {
        await sendMessage(messageToSend as TelegramBot.SendMessageParams);
    }

    return false;
};
